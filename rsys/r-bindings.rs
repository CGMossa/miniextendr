/* automatically generated by rust-bindgen 0.65.1 */

pub const __STDC_WANT_IEC_60559_FUNCS_EXT__: u32 = 1;
pub const INT_MIN: i32 = -2147483648;
pub const HAVE_F77_UNDERSCORE: u32 = 1;
pub const IEEE_754: u32 = 1;
pub const SUPPORT_UTF8: u32 = 1;
pub const SUPPORT_MBCS: u32 = 1;
pub const ENABLE_NLS: u32 = 1;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const HAVE_UINTPTR_T: u32 = 1;
pub const SINGLESXP: u32 = 302;
pub const R_LEN_T_MAX: u32 = 2147483647;
pub const R_XLEN_T_MAX: u64 = 4503599627370496;
pub const R_SHORT_LEN_MAX: u32 = 2147483647;
pub const NILSXP: u32 = 0;
pub const SYMSXP: u32 = 1;
pub const LISTSXP: u32 = 2;
pub const CLOSXP: u32 = 3;
pub const ENVSXP: u32 = 4;
pub const PROMSXP: u32 = 5;
pub const LANGSXP: u32 = 6;
pub const SPECIALSXP: u32 = 7;
pub const BUILTINSXP: u32 = 8;
pub const CHARSXP: u32 = 9;
pub const LGLSXP: u32 = 10;
pub const INTSXP: u32 = 13;
pub const REALSXP: u32 = 14;
pub const CPLXSXP: u32 = 15;
pub const STRSXP: u32 = 16;
pub const DOTSXP: u32 = 17;
pub const ANYSXP: u32 = 18;
pub const VECSXP: u32 = 19;
pub const EXPRSXP: u32 = 20;
pub const BCODESXP: u32 = 21;
pub const EXTPTRSXP: u32 = 22;
pub const WEAKREFSXP: u32 = 23;
pub const RAWSXP: u32 = 24;
pub const S4SXP: u32 = 25;
pub const NEWSXP: u32 = 30;
pub const FREESXP: u32 = 31;
pub const FUNSXP: u32 = 99;
pub const TYPE_BITS: u32 = 5;
pub const MAX_NUM_SEXPTYPE: u32 = 32;
pub const NAMEDMAX: u32 = 7;
pub const R_XDR_DOUBLE_SIZE: u32 = 8;
pub const R_XDR_INTEGER_SIZE: u32 = 4;
pub const R_CODESET_MAX: u32 = 63;
pub const IDENT_NUM_AS_BITS: u32 = 1;
pub const IDENT_NA_AS_BITS: u32 = 2;
pub const IDENT_ATTR_BY_ORDER: u32 = 4;
pub const IDENT_USE_BYTECODE: u32 = 8;
pub const IDENT_USE_CLOENV: u32 = 16;
pub const IDENT_USE_SRCREF: u32 = 32;
pub const IDENT_EXTPTR_AS_REF: u32 = 64;
pub const HT_TYPE_IDENTICAL: u32 = 0;
pub const HT_TYPE_ADDRESS: u32 = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
#[doc = "R_xlen_t is defined as int on 32-bit platforms, and\n that confuses Rust. Keeping it always as ptrdiff_t works\n fine even on 32-bit.\n <div rustbindgen replaces=\"R_xlen_t\"></div>"]
pub type R_xlen_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
  pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
  const UNINIT: ::std::mem::MaybeUninit<_iobuf> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_iobuf>(),
    8usize,
    concat!("Size of: ", stringify!(_iobuf))
  );
  assert_eq!(
    ::std::mem::align_of::<_iobuf>(),
    8usize,
    concat!("Alignment of ", stringify!(_iobuf))
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_iobuf),
      "::",
      stringify!(_Placeholder)
    )
  );
}
pub type FILE = _iobuf;
extern "C" {
  #[doc = "IEEE NaN"]
  pub static mut R_NaN: f64;
}
extern "C" {
  #[doc = "IEEE Inf"]
  pub static mut R_PosInf: f64;
}
extern "C" {
  #[doc = "IEEE -Inf"]
  pub static mut R_NegInf: f64;
}
extern "C" {
  #[doc = "NA_REAL: IEEE"]
  pub static mut R_NaReal: f64;
}
extern "C" {
  #[doc = "NA_INTEGER:= INT_MIN currently"]
  pub static mut R_NaInt: ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "NA_STRING is a SEXP, so defined in Rinternals.h"]
  pub fn R_IsNA(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_IsNaN(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_finite(arg1: f64) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Rboolean {
  #[doc = ", MAYBE"]
  FALSE = 0,
  #[doc = ", MAYBE"]
  TRUE = 1,
}
extern "C" {
  pub fn Rf_error(arg1: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
  pub fn UNIMPLEMENTED(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
  pub fn WrongArgCount(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
  pub fn Rf_warning(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn R_ShowMessage(s: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn vmaxget() -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn vmaxset(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
  pub fn R_gc();
}
extern "C" {
  pub fn R_gc_running() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_alloc(
    arg1: usize, arg2: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_allocLD(nelem: usize) -> *mut u128;
}
extern "C" {
  pub fn S_alloc(
    arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn S_realloc(
    arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_long,
    arg3: ::std::os::raw::c_long, arg4: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_malloc_gc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn R_calloc_gc(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn R_realloc_gc(
    arg1: *mut ::std::os::raw::c_void, arg2: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn Rprintf(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn REprintf(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn Rvprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list);
}
extern "C" {
  pub fn REvprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RNGtype {
  WICHMANN_HILL = 0,
  MARSAGLIA_MULTICARRY = 1,
  SUPER_DUPER = 2,
  MERSENNE_TWISTER = 3,
  KNUTH_TAOCP = 4,
  USER_UNIF = 5,
  KNUTH_TAOCP2 = 6,
  LECUYER_CMRG = 7,
}
#[repr(u32)]
#[doc = "Different kinds of \"N(0,1)\" generators :"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum N01type {
  BUGGY_KINDERMAN_RAMAGE = 0,
  AHRENS_DIETER = 1,
  BOX_MULLER = 2,
  USER_NORM = 3,
  INVERSION = 4,
  KINDERMAN_RAMAGE = 5,
}
#[repr(u32)]
#[doc = "Different ways to generate discrete uniform samples"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Sampletype {
  ROUNDING = 0,
  REJECTION = 1,
}
extern "C" {
  pub fn R_sample_kind() -> Sampletype;
}
extern "C" {
  pub fn GetRNGstate();
}
extern "C" {
  pub fn PutRNGstate();
}
extern "C" {
  pub fn unif_rand() -> f64;
}
extern "C" {
  pub fn R_unif_index(arg1: f64) -> f64;
}
extern "C" {
  #[doc = "These are also defined in Rmath.h"]
  pub fn norm_rand() -> f64;
}
extern "C" {
  pub fn exp_rand() -> f64;
}
pub type Int32 = ::std::os::raw::c_uint;
extern "C" {
  pub fn user_unif_rand() -> *mut f64;
}
extern "C" {
  pub fn user_unif_init(arg1: Int32);
}
extern "C" {
  pub fn user_unif_nseed() -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn user_unif_seedloc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn user_norm_rand() -> *mut f64;
}
extern "C" {
  #[doc = "../../main/sort.c :"]
  pub fn R_isort(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn R_rsort(arg1: *mut f64, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn R_csort(arg1: *mut Rcomplex, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn rsort_with_index(
    arg1: *mut f64, arg2: *mut ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Rf_revsort(
    arg1: *mut f64, arg2: *mut ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Rf_iPsort(
    arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Rf_rPsort(
    arg1: *mut f64, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Rf_cPsort(
    arg1: *mut Rcomplex, arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  #[doc = "../../main/qsort.c : */\n/* dummy renamed to II to avoid problems with g++ on Solaris"]
  pub fn R_qsort(v: *mut f64, i: usize, j: usize);
}
extern "C" {
  pub fn R_qsort_I(
    v: *mut f64, II: *mut ::std::os::raw::c_int, i: ::std::os::raw::c_int,
    j: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn R_qsort_int(iv: *mut ::std::os::raw::c_int, i: usize, j: usize);
}
extern "C" {
  pub fn R_qsort_int_I(
    iv: *mut ::std::os::raw::c_int, II: *mut ::std::os::raw::c_int,
    i: ::std::os::raw::c_int, j: ::std::os::raw::c_int,
  );
}
extern "C" {
  #[doc = "../../main/util.c  and others :"]
  pub fn R_ExpandFileName(
    arg1: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_ExpandFileNameUTF8(
    arg1: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_setIVector(
    arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Rf_setRVector(arg1: *mut f64, arg2: ::std::os::raw::c_int, arg3: f64);
}
extern "C" {
  pub fn Rf_StringFalse(arg1: *const ::std::os::raw::c_char) -> Rboolean;
}
extern "C" {
  pub fn Rf_StringTrue(arg1: *const ::std::os::raw::c_char) -> Rboolean;
}
extern "C" {
  pub fn Rf_isBlankString(arg1: *const ::std::os::raw::c_char) -> Rboolean;
}
extern "C" {
  #[doc = "These two are guaranteed to use '.' as the decimal point,\nand to accept \"NA\"."]
  pub fn R_atof(str_: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
  pub fn R_strtod(
    c: *const ::std::os::raw::c_char, end: *mut *mut ::std::os::raw::c_char,
  ) -> f64;
}
extern "C" {
  pub fn R_tmpnam(
    prefix: *const ::std::os::raw::c_char,
    tempdir: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_tmpnam2(
    prefix: *const ::std::os::raw::c_char,
    tempdir: *const ::std::os::raw::c_char,
    fileext: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_free_tmpnam(name: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn R_CheckUserInterrupt();
}
extern "C" {
  pub fn R_CheckStack();
}
extern "C" {
  pub fn R_CheckStack2(arg1: usize);
}
extern "C" {
  #[doc = "../../appl/interv.c: also in Applic.h"]
  pub fn findInterval(
    xt: *mut f64, n: ::std::os::raw::c_int, x: f64, rightmost_closed: Rboolean,
    all_inside: Rboolean, ilo: ::std::os::raw::c_int,
    mflag: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn findInterval2(
    xt: *mut f64, n: ::std::os::raw::c_int, x: f64, rightmost_closed: Rboolean,
    all_inside: Rboolean, left_open: Rboolean, ilo: ::std::os::raw::c_int,
    mflag: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn find_interv_vec(
    xt: *mut f64, n: *mut ::std::os::raw::c_int, x: *mut f64,
    nx: *mut ::std::os::raw::c_int,
    rightmost_closed: *mut ::std::os::raw::c_int,
    all_inside: *mut ::std::os::raw::c_int, indx: *mut ::std::os::raw::c_int,
  );
}
extern "C" {
  #[doc = "../../appl/maxcol.c: also in Applic.h"]
  pub fn R_max_col(
    matrix: *mut f64, nr: *mut ::std::os::raw::c_int,
    nc: *mut ::std::os::raw::c_int, maxes: *mut ::std::os::raw::c_int,
    ties_meth: *mut ::std::os::raw::c_int,
  );
}
extern "C" {
  #[doc = "S Like Memory Management"]
  pub fn R_chk_calloc(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn R_chk_realloc(
    arg1: *mut ::std::os::raw::c_void, arg2: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn R_chk_free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn R_FlushConsole();
}
extern "C" {
  #[doc = "always declared, but only usable under Win32 and Aqua"]
  pub fn R_ProcessEvents();
}
extern "C" {
  pub fn R_WaitEvent();
}
#[doc = "Called with a variable argument set after casting to a compatible\nfunction pointer."]
pub type DL_FUNC =
  ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type R_NativePrimitiveArgType = ::std::os::raw::c_uint;
#[doc = "These are very similar to those in Rdynpriv.h,\nbut we maintain them separately to give us more freedom to do\nsome computations on the internal versions that are derived from\nthese definitions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_CMethodDef {
  pub name: *const ::std::os::raw::c_char,
  pub fun: DL_FUNC,
  pub numArgs: ::std::os::raw::c_int,
  pub types: *mut R_NativePrimitiveArgType,
}
#[test]
fn bindgen_test_layout_R_CMethodDef() {
  const UNINIT: ::std::mem::MaybeUninit<R_CMethodDef> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<R_CMethodDef>(),
    32usize,
    concat!("Size of: ", stringify!(R_CMethodDef))
  );
  assert_eq!(
    ::std::mem::align_of::<R_CMethodDef>(),
    8usize,
    concat!("Alignment of ", stringify!(R_CMethodDef))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CMethodDef),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fun) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CMethodDef),
      "::",
      stringify!(fun)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numArgs) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CMethodDef),
      "::",
      stringify!(numArgs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CMethodDef),
      "::",
      stringify!(types)
    )
  );
}
#[doc = "These are very similar to those in Rdynpriv.h,\nbut we maintain them separately to give us more freedom to do\nsome computations on the internal versions that are derived from\nthese definitions."]
pub type R_FortranMethodDef = R_CMethodDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_CallMethodDef {
  pub name: *const ::std::os::raw::c_char,
  pub fun: DL_FUNC,
  pub numArgs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_R_CallMethodDef() {
  const UNINIT: ::std::mem::MaybeUninit<R_CallMethodDef> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<R_CallMethodDef>(),
    24usize,
    concat!("Size of: ", stringify!(R_CallMethodDef))
  );
  assert_eq!(
    ::std::mem::align_of::<R_CallMethodDef>(),
    8usize,
    concat!("Alignment of ", stringify!(R_CallMethodDef))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CallMethodDef),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fun) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CallMethodDef),
      "::",
      stringify!(fun)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numArgs) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(R_CallMethodDef),
      "::",
      stringify!(numArgs)
    )
  );
}
pub type R_ExternalMethodDef = R_CallMethodDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DllInfo {
  _unused: [u8; 0],
}
pub type DllInfo = _DllInfo;
extern "C" {
  pub fn R_registerRoutines(
    info: *mut DllInfo, croutines: *const R_CMethodDef,
    callRoutines: *const R_CallMethodDef,
    fortranRoutines: *const R_FortranMethodDef,
    externalRoutines: *const R_ExternalMethodDef,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_useDynamicSymbols(info: *mut DllInfo, value: Rboolean) -> Rboolean;
}
extern "C" {
  pub fn R_forceSymbols(info: *mut DllInfo, value: Rboolean) -> Rboolean;
}
extern "C" {
  pub fn R_getDllInfo(name: *const ::std::os::raw::c_char) -> *mut DllInfo;
}
extern "C" {
  #[doc = "To be used by applications embedding R to register their symbols\nthat are not related to any dynamic module"]
  pub fn R_getEmbeddingDllInfo() -> *mut DllInfo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rf_RegisteredNativeSymbol {
  _unused: [u8; 0],
}
pub type R_RegisteredNativeSymbol = Rf_RegisteredNativeSymbol;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum NativeSymbolType {
  R_ANY_SYM = 0,
  R_C_SYM = 1,
  R_CALL_SYM = 2,
  R_FORTRAN_SYM = 3,
  R_EXTERNAL_SYM = 4,
}
extern "C" {
  pub fn R_FindSymbol(
    arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char,
    symbol: *mut R_RegisteredNativeSymbol,
  ) -> DL_FUNC;
}
extern "C" {
  #[doc = "Interface for exporting and importing functions from one package\nfor use from C code in a package.  The registration part probably\nought to be integrated with the other registrations.  The naming of\nthese routines may be less than ideal."]
  pub fn R_RegisterCCallable(
    package: *const ::std::os::raw::c_char,
    name: *const ::std::os::raw::c_char, fptr: DL_FUNC,
  );
}
extern "C" {
  pub fn R_GetCCallable(
    package: *const ::std::os::raw::c_char, name: *const ::std::os::raw::c_char,
  ) -> DL_FUNC;
}
pub type Rbyte = ::std::os::raw::c_uchar;
#[doc = "type for length of (standard, not long) vectors etc"]
pub type R_len_t = ::std::os::raw::c_int;
#[doc = "NOT YET using enum:\n  1)\tThe internal SEXPREC struct has 'SEXPTYPE type : 5'\n\t(making FUNSXP and CLOSXP equivalent in there),\n\tgiving (-Wall only ?) warnings all over the place\n 2)\tMany switch(type) { case ... } statements need a final `default:'\n\tadded in order to avoid warnings like [e.g. l.170 of ../main/util.c]\n\t  \"enumeration value `FUNSXP' not handled in switch\""]
pub type SEXPTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SEXPREC {
  _unused: [u8; 0],
}
pub type SEXP = *mut SEXPREC;
extern "C" {
  pub fn R_CHAR(x: SEXP) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = "Various tests with macro versions in the internal headers"]
  pub fn Rf_isNull(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isSymbol(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isLogical(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isReal(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isComplex(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isExpression(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isEnvironment(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isString(s: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isObject(s: SEXP) -> Rboolean;
}
extern "C" {
  #[doc = "General Cons Cell Attributes"]
  pub fn ATTRIB(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn OBJECT(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn MARK(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn TYPEOF(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn NAMED(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn REFCNT(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SET_ATTRIB(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn DUPLICATE_ATTRIB(to: SEXP, from: SEXP);
}
extern "C" {
  pub fn SHALLOW_DUPLICATE_ATTRIB(to: SEXP, from: SEXP);
}
extern "C" {
  pub fn MARK_NOT_MUTABLE(x: SEXP);
}
extern "C" {
  #[doc = "S4 object testing"]
  pub fn IS_S4_OBJECT(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "Vector Access Functions"]
  pub fn LENGTH(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn XLENGTH(x: SEXP) -> R_xlen_t;
}
extern "C" {
  pub fn TRUELENGTH(x: SEXP) -> R_xlen_t;
}
extern "C" {
  pub fn IS_LONG_VEC(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn LEVELS(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn LOGICAL(x: SEXP) -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn INTEGER(x: SEXP) -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn RAW(x: SEXP) -> *mut Rbyte;
}
extern "C" {
  pub fn REAL(x: SEXP) -> *mut f64;
}
extern "C" {
  pub fn COMPLEX(x: SEXP) -> *mut Rcomplex;
}
extern "C" {
  pub fn LOGICAL_RO(x: SEXP) -> *const ::std::os::raw::c_int;
}
extern "C" {
  pub fn INTEGER_RO(x: SEXP) -> *const ::std::os::raw::c_int;
}
extern "C" {
  pub fn RAW_RO(x: SEXP) -> *const Rbyte;
}
extern "C" {
  pub fn REAL_RO(x: SEXP) -> *const f64;
}
extern "C" {
  pub fn COMPLEX_RO(x: SEXP) -> *const Rcomplex;
}
extern "C" {
  #[doc = "SEXP (STRING_ELT)(SEXP x, R_xlen_t i);"]
  pub fn VECTOR_ELT(x: SEXP, i: R_xlen_t) -> SEXP;
}
extern "C" {
  pub fn SET_STRING_ELT(x: SEXP, i: R_xlen_t, v: SEXP);
}
extern "C" {
  pub fn SET_VECTOR_ELT(x: SEXP, i: R_xlen_t, v: SEXP) -> SEXP;
}
extern "C" {
  pub fn STRING_PTR(x: SEXP) -> *mut SEXP;
}
extern "C" {
  pub fn STRING_PTR_RO(x: SEXP) -> *const SEXP;
}
extern "C" {
  pub fn VECTOR_PTR(x: SEXP) -> !;
}
extern "C" {
  pub fn INTEGER_GET_REGION(
    sx: SEXP, i: R_xlen_t, n: R_xlen_t, buf: *mut ::std::os::raw::c_int,
  ) -> R_xlen_t;
}
extern "C" {
  pub fn REAL_GET_REGION(
    sx: SEXP, i: R_xlen_t, n: R_xlen_t, buf: *mut f64,
  ) -> R_xlen_t;
}
extern "C" {
  pub fn LOGICAL_GET_REGION(
    sx: SEXP, i: R_xlen_t, n: R_xlen_t, buf: *mut ::std::os::raw::c_int,
  ) -> R_xlen_t;
}
extern "C" {
  pub fn COMPLEX_GET_REGION(
    sx: SEXP, i: R_xlen_t, n: R_xlen_t, buf: *mut Rcomplex,
  ) -> R_xlen_t;
}
extern "C" {
  pub fn RAW_GET_REGION(
    sx: SEXP, i: R_xlen_t, n: R_xlen_t, buf: *mut Rbyte,
  ) -> R_xlen_t;
}
extern "C" {
  #[doc = "metadata access"]
  pub fn INTEGER_IS_SORTED(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn INTEGER_NO_NA(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn REAL_IS_SORTED(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn REAL_NO_NA(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn LOGICAL_IS_SORTED(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn LOGICAL_NO_NA(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn STRING_IS_SORTED(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn STRING_NO_NA(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn TAG(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CDR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CAAR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CDAR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CADR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CDDR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CDDDR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CADDR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CADDDR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CAD4R(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn CAD5R(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn MISSING(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SET_TAG(x: SEXP, y: SEXP);
}
extern "C" {
  pub fn SETCAR(x: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  pub fn SETCDR(x: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  pub fn SETCADR(x: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  pub fn SETCADDR(x: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  pub fn SETCADDDR(x: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  pub fn SETCAD4R(e: SEXP, y: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "Closure Access Functions"]
  pub fn FORMALS(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn BODY(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn CLOENV(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn RDEBUG(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn RSTEP(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn RTRACE(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SET_RDEBUG(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_RSTEP(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_RTRACE(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_FORMALS(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_BODY(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_CLOENV(x: SEXP, v: SEXP);
}
extern "C" {
  #[doc = "Symbol Access Functions"]
  pub fn PRINTNAME(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn SYMVALUE(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn INTERNAL(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn DDVAL(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "Environment Access Functions"]
  pub fn FRAME(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn ENCLOS(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn HASHTAB(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn ENVFLAGS(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "Promise Access Functions"]
  pub fn PRCODE(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn PRENV(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn PRVALUE(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn PRSEEN(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "External pointer access macros"]
  pub fn EXTPTR_PROT(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn EXTPTR_TAG(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn EXTPTR_PTR(arg1: SEXP) -> *mut ::std::os::raw::c_void;
}
#[doc = "We sometimes need to coerce a protected value and place the new\ncoerced value under protection.  For these cases PROTECT_WITH_INDEX\nsaves an index of the protection location that can be used to\nreplace the protected value using REPROTECT."]
pub type PROTECT_INDEX = ::std::os::raw::c_int;
extern "C" {
  #[doc = "The \"global\" environment"]
  pub static mut R_GlobalEnv: SEXP;
}
extern "C" {
  #[doc = "An empty environment at the root of the\nenvironment tree"]
  pub static mut R_EmptyEnv: SEXP;
}
extern "C" {
  #[doc = "The base environment; formerly R_NilValue"]
  pub static mut R_BaseEnv: SEXP;
}
extern "C" {
  #[doc = "The (fake) namespace for base"]
  pub static mut R_BaseNamespace: SEXP;
}
extern "C" {
  #[doc = "Registry for registered namespaces"]
  pub static mut R_NamespaceRegistry: SEXP;
}
extern "C" {
  #[doc = "Current srcref, for debuggers"]
  pub static mut R_Srcref: SEXP;
}
extern "C" {
  #[doc = "The nil object"]
  pub static mut R_NilValue: SEXP;
}
extern "C" {
  #[doc = "Unbound marker"]
  pub static mut R_UnboundValue: SEXP;
}
extern "C" {
  #[doc = "Missing argument marker"]
  pub static mut R_MissingArg: SEXP;
}
extern "C" {
  #[doc = "To be found in BC interp. state\n(marker)"]
  pub static mut R_InBCInterpreter: SEXP;
}
extern "C" {
  #[doc = "Use current expression (marker)"]
  pub static mut R_CurrentExpression: SEXP;
}
extern "C" {
  #[doc = "Marker for restarted function calls"]
  pub static mut R_RestartToken: SEXP;
}
extern "C" {
  #[doc = "\"as.character\""]
  pub static mut R_AsCharacterSymbol: SEXP;
}
extern "C" {
  #[doc = "\"@\""]
  pub static mut R_AtsignSymbol: SEXP;
}
extern "C" {
  #[doc = "<-- backcompatible version of:"]
  pub static mut R_baseSymbol: SEXP;
}
extern "C" {
  #[doc = "\"base\""]
  pub static mut R_BaseSymbol: SEXP;
}
extern "C" {
  #[doc = "\"{\""]
  pub static mut R_BraceSymbol: SEXP;
}
extern "C" {
  #[doc = "\"[[\""]
  pub static mut R_Bracket2Symbol: SEXP;
}
extern "C" {
  #[doc = "\"[\""]
  pub static mut R_BracketSymbol: SEXP;
}
extern "C" {
  #[doc = "\"class\""]
  pub static mut R_ClassSymbol: SEXP;
}
extern "C" {
  #[doc = "\".Device\""]
  pub static mut R_DeviceSymbol: SEXP;
}
extern "C" {
  #[doc = "\"dimnames\""]
  pub static mut R_DimNamesSymbol: SEXP;
}
extern "C" {
  #[doc = "\"dim\""]
  pub static mut R_DimSymbol: SEXP;
}
extern "C" {
  #[doc = "\"$\""]
  pub static mut R_DollarSymbol: SEXP;
}
extern "C" {
  #[doc = "\"...\""]
  pub static mut R_DotsSymbol: SEXP;
}
extern "C" {
  #[doc = "\"::\""]
  pub static mut R_DoubleColonSymbol: SEXP;
}
extern "C" {
  #[doc = "\"drop\""]
  pub static mut R_DropSymbol: SEXP;
}
extern "C" {
  #[doc = "\"eval\""]
  pub static mut R_EvalSymbol: SEXP;
}
extern "C" {
  #[doc = "\"function\""]
  pub static mut R_FunctionSymbol: SEXP;
}
extern "C" {
  #[doc = "\".Last.value\""]
  pub static mut R_LastvalueSymbol: SEXP;
}
extern "C" {
  #[doc = "\"levels\""]
  pub static mut R_LevelsSymbol: SEXP;
}
extern "C" {
  #[doc = "\"mode\""]
  pub static mut R_ModeSymbol: SEXP;
}
extern "C" {
  #[doc = "\"na.rm\""]
  pub static mut R_NaRmSymbol: SEXP;
}
extern "C" {
  #[doc = "\"name\""]
  pub static mut R_NameSymbol: SEXP;
}
extern "C" {
  #[doc = "\"names\""]
  pub static mut R_NamesSymbol: SEXP;
}
extern "C" {
  #[doc = "\".__NAMESPACE__.\""]
  pub static mut R_NamespaceEnvSymbol: SEXP;
}
extern "C" {
  #[doc = "\"package\""]
  pub static mut R_PackageSymbol: SEXP;
}
extern "C" {
  #[doc = "\"previous\""]
  pub static mut R_PreviousSymbol: SEXP;
}
extern "C" {
  #[doc = "\"quote\""]
  pub static mut R_QuoteSymbol: SEXP;
}
extern "C" {
  #[doc = "\"row.names\""]
  pub static mut R_RowNamesSymbol: SEXP;
}
extern "C" {
  #[doc = "\".Random.seed\""]
  pub static mut R_SeedsSymbol: SEXP;
}
extern "C" {
  #[doc = "\"sort.list\""]
  pub static mut R_SortListSymbol: SEXP;
}
extern "C" {
  #[doc = "\"source\""]
  pub static mut R_SourceSymbol: SEXP;
}
extern "C" {
  #[doc = "\"spec\""]
  pub static mut R_SpecSymbol: SEXP;
}
extern "C" {
  #[doc = "\":::\""]
  pub static mut R_TripleColonSymbol: SEXP;
}
extern "C" {
  #[doc = "\"tsp\""]
  pub static mut R_TspSymbol: SEXP;
}
extern "C" {
  #[doc = "\".defined\""]
  pub static mut R_dot_defined: SEXP;
}
extern "C" {
  #[doc = "\".Method\""]
  pub static mut R_dot_Method: SEXP;
}
extern "C" {
  #[doc = "\".packageName\""]
  pub static mut R_dot_packageName: SEXP;
}
extern "C" {
  #[doc = "\".target\""]
  pub static mut R_dot_target: SEXP;
}
extern "C" {
  #[doc = "\".Generic\""]
  pub static mut R_dot_Generic: SEXP;
}
extern "C" {
  #[doc = "NA_STRING as a CHARSXP"]
  pub static mut R_NaString: SEXP;
}
extern "C" {
  #[doc = "\"\" as a CHARSXP"]
  pub static mut R_BlankString: SEXP;
}
extern "C" {
  #[doc = "\"\" as a STRSXP"]
  pub static mut R_BlankScalarString: SEXP;
}
extern "C" {
  #[doc = "srcref related functions"]
  pub fn R_GetCurrentSrcref(arg1: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn R_GetSrcFilename(arg1: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "Type Coercions of all kinds"]
  pub fn Rf_asChar(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_coerceVector(arg1: SEXP, arg2: SEXPTYPE) -> SEXP;
}
extern "C" {
  pub fn Rf_PairToVectorList(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_VectorToPairList(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_asCharacterFactor(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_asLogical(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_asInteger(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_asReal(x: SEXP) -> f64;
}
extern "C" {
  pub fn Rf_asComplex(x: SEXP) -> Rcomplex;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_allocator {
  _unused: [u8; 0],
}
pub type R_allocator_t = R_allocator;
extern "C" {
  #[doc = "Other Internally Used Functions, excluding those which are inline-able"]
  pub fn Rf_acopy_string(
    arg1: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_alloc3DArray(
    arg1: SEXPTYPE, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int,
    arg4: ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_allocArray(arg1: SEXPTYPE, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_allocMatrix(
    arg1: SEXPTYPE, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_allocList(arg1: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn Rf_allocS4Object() -> SEXP;
}
extern "C" {
  pub fn Rf_allocSExp(arg1: SEXPTYPE) -> SEXP;
}
extern "C" {
  pub fn Rf_allocVector3(
    arg1: SEXPTYPE, arg2: R_xlen_t, arg3: *mut R_allocator_t,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_any_duplicated(x: SEXP, from_last: Rboolean) -> R_xlen_t;
}
extern "C" {
  pub fn Rf_any_duplicated3(
    x: SEXP, incomp: SEXP, from_last: Rboolean,
  ) -> R_xlen_t;
}
extern "C" {
  pub fn Rf_applyClosure(
    arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP, arg5: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_classgets(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_cons(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_copyMatrix(arg1: SEXP, arg2: SEXP, arg3: Rboolean);
}
extern "C" {
  pub fn Rf_copyListMatrix(arg1: SEXP, arg2: SEXP, arg3: Rboolean);
}
extern "C" {
  pub fn Rf_copyMostAttrib(arg1: SEXP, arg2: SEXP);
}
extern "C" {
  pub fn Rf_copyVector(arg1: SEXP, arg2: SEXP);
}
extern "C" {
  pub fn Rf_defineVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
}
extern "C" {
  pub fn Rf_dimgets(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_dimnamesgets(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_duplicate(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_shallow_duplicate(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_duplicate_attr(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_shallow_duplicate_attr(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lazy_duplicate(arg1: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "the next really should not be here and is also in Defn.h"]
  pub fn Rf_duplicated(arg1: SEXP, arg2: Rboolean) -> SEXP;
}
extern "C" {
  pub fn Rf_eval(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_findFun(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_findVar(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_findVarInFrame(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_findVarInFrame3(arg1: SEXP, arg2: SEXP, arg3: Rboolean) -> SEXP;
}
extern "C" {
  pub fn R_existsVarInFrame(arg1: SEXP, arg2: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_removeVarFromFrame(arg1: SEXP, arg2: SEXP);
}
extern "C" {
  pub fn Rf_getAttrib(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_GetArrayDimnames(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_GetColNames(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_GetMatrixDimnames(
    arg1: SEXP, arg2: *mut SEXP, arg3: *mut SEXP,
    arg4: *mut *const ::std::os::raw::c_char,
    arg5: *mut *const ::std::os::raw::c_char,
  );
}
extern "C" {
  pub fn Rf_GetOption(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_GetOption1(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_GetOptionDigits() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_GetOptionWidth() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_GetRowNames(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_gsetVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
}
extern "C" {
  pub fn Rf_install(arg1: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn Rf_installChar(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_installNoTrChar(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_installTrChar(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_isOrdered(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isUnordered(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isUnsorted(arg1: SEXP, arg2: Rboolean) -> Rboolean;
}
extern "C" {
  pub fn Rf_lengthgets(arg1: SEXP, arg2: R_len_t) -> SEXP;
}
extern "C" {
  pub fn Rf_xlengthgets(arg1: SEXP, arg2: R_xlen_t) -> SEXP;
}
extern "C" {
  pub fn R_lsInternal(arg1: SEXP, arg2: Rboolean) -> SEXP;
}
extern "C" {
  pub fn R_lsInternal3(arg1: SEXP, arg2: Rboolean, arg3: Rboolean) -> SEXP;
}
extern "C" {
  pub fn Rf_match(arg1: SEXP, arg2: SEXP, arg3: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn Rf_namesgets(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_mkChar(arg1: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn Rf_mkCharLen(
    arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_NonNullStringMatch(arg1: SEXP, arg2: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_ncols(arg1: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_nrows(arg1: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_nthcdr(arg1: SEXP, arg2: ::std::os::raw::c_int) -> SEXP;
}
#[repr(u32)]
#[doc = "../main/character.c :"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nchar_type {
  Bytes = 0,
  Chars = 1,
  Width = 2,
}
extern "C" {
  pub fn R_nchar(
    string: SEXP, type_: nchar_type, allowNA: Rboolean, keepNA: Rboolean,
    msg_name: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_ParseEvalString(
    arg1: *const ::std::os::raw::c_char, arg2: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn R_ParseString(arg1: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn Rf_PrintValue(arg1: SEXP);
}
extern "C" {
  pub fn Rf_setAttrib(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_setVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
}
extern "C" {
  pub fn Rf_str2type(arg1: *const ::std::os::raw::c_char) -> SEXPTYPE;
}
extern "C" {
  pub fn Rf_StringBlank(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_substitute(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_topenv(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_translateChar(arg1: SEXP) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_translateCharUTF8(arg1: SEXP) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_type2char(arg1: SEXPTYPE) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_type2rstr(arg1: SEXPTYPE) -> SEXP;
}
extern "C" {
  pub fn Rf_type2str(arg1: SEXPTYPE) -> SEXP;
}
extern "C" {
  pub fn Rf_type2str_nowarn(arg1: SEXPTYPE) -> SEXP;
}
extern "C" {
  pub fn Rf_unprotect_ptr(arg1: SEXP);
}
extern "C" {
  pub fn R_tryEval(
    arg1: SEXP, arg2: SEXP, arg3: *mut ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn R_tryEvalSilent(
    arg1: SEXP, arg2: SEXP, arg3: *mut ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn R_GetCurrentEnv() -> SEXP;
}
extern "C" {
  pub fn Rf_isS4(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_asS4(
    arg1: SEXP, arg2: Rboolean, arg3: ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_S3Class(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_isBasicClass(
    arg1: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[doc = "cetype_t is an identifier reseved by POSIX, but it is\nwell established as public.  Could remap by a #define though"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cetype_t {
  CE_NATIVE = 0,
  CE_UTF8 = 1,
  CE_LATIN1 = 2,
  CE_BYTES = 3,
  CE_SYMBOL = 5,
  CE_ANY = 99,
}
extern "C" {
  pub fn Rf_getCharCE(arg1: SEXP) -> cetype_t;
}
extern "C" {
  pub fn Rf_mkCharCE(
    arg1: *const ::std::os::raw::c_char, arg2: cetype_t,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_mkCharLenCE(
    arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int,
    arg3: cetype_t,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_reEnc(
    x: *const ::std::os::raw::c_char, ce_in: cetype_t, ce_out: cetype_t,
    subst: ::std::os::raw::c_int,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn Rf_reEnc3(
    x: *const ::std::os::raw::c_char, fromcode: *const ::std::os::raw::c_char,
    tocode: *const ::std::os::raw::c_char, subst: ::std::os::raw::c_int,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  #[doc = "Calling a function with arguments evaluated"]
  pub fn R_forceAndCall(e: SEXP, n: ::std::os::raw::c_int, rho: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "External pointer interface"]
  pub fn R_MakeExternalPtr(
    p: *mut ::std::os::raw::c_void, tag: SEXP, prot: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn R_ExternalPtrAddr(s: SEXP) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn R_ExternalPtrTag(s: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_ExternalPtrProtected(s: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_ClearExternalPtr(s: SEXP);
}
extern "C" {
  pub fn R_SetExternalPtrAddr(s: SEXP, p: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn R_SetExternalPtrTag(s: SEXP, tag: SEXP);
}
extern "C" {
  pub fn R_SetExternalPtrProtected(s: SEXP, p: SEXP);
}
extern "C" {
  #[doc = "Added in R 3.4.0"]
  pub fn R_MakeExternalPtrFn(p: DL_FUNC, tag: SEXP, prot: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_ExternalPtrAddrFn(s: SEXP) -> DL_FUNC;
}
#[doc = "Finalization interface"]
pub type R_CFinalizer_t =
  ::std::option::Option<unsafe extern "C" fn(arg1: SEXP)>;
extern "C" {
  pub fn R_RegisterFinalizer(s: SEXP, fun: SEXP);
}
extern "C" {
  pub fn R_RegisterCFinalizer(s: SEXP, fun: R_CFinalizer_t);
}
extern "C" {
  pub fn R_RegisterFinalizerEx(s: SEXP, fun: SEXP, onexit: Rboolean);
}
extern "C" {
  pub fn R_RegisterCFinalizerEx(s: SEXP, fun: R_CFinalizer_t, onexit: Rboolean);
}
extern "C" {
  pub fn R_RunPendingFinalizers();
}
extern "C" {
  #[doc = "Weak reference interface"]
  pub fn R_MakeWeakRef(
    key: SEXP, val: SEXP, fin: SEXP, onexit: Rboolean,
  ) -> SEXP;
}
extern "C" {
  pub fn R_MakeWeakRefC(
    key: SEXP, val: SEXP, fin: R_CFinalizer_t, onexit: Rboolean,
  ) -> SEXP;
}
extern "C" {
  pub fn R_WeakRefKey(w: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_WeakRefValue(w: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_RunWeakRefFinalizer(w: SEXP);
}
extern "C" {
  pub fn R_PromiseExpr(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_ClosureExpr(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_BytecodeExpr(e: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "Protected evaluation"]
  pub fn R_ToplevelExec(
    fun: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
    >,
    data: *mut ::std::os::raw::c_void,
  ) -> Rboolean;
}
extern "C" {
  pub fn R_ExecWithCleanup(
    fun: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> SEXP,
    >,
    data: *mut ::std::os::raw::c_void,
    cleanfun: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
    >,
    cleandata: *mut ::std::os::raw::c_void,
  ) -> SEXP;
}
extern "C" {
  pub fn R_tryCatch(
    arg1: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> SEXP,
    >,
    arg2: *mut ::std::os::raw::c_void, arg3: SEXP,
    arg4: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: SEXP,
        arg2: *mut ::std::os::raw::c_void,
      ) -> SEXP,
    >,
    arg5: *mut ::std::os::raw::c_void,
    arg6: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
    >,
    arg7: *mut ::std::os::raw::c_void,
  ) -> SEXP;
}
extern "C" {
  pub fn R_tryCatchError(
    arg1: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> SEXP,
    >,
    arg2: *mut ::std::os::raw::c_void,
    arg3: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: SEXP,
        arg2: *mut ::std::os::raw::c_void,
      ) -> SEXP,
    >,
    arg4: *mut ::std::os::raw::c_void,
  ) -> SEXP;
}
extern "C" {
  pub fn R_withCallingErrorHandler(
    arg1: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> SEXP,
    >,
    arg2: *mut ::std::os::raw::c_void,
    arg3: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: SEXP,
        arg2: *mut ::std::os::raw::c_void,
      ) -> SEXP,
    >,
    arg4: *mut ::std::os::raw::c_void,
  ) -> SEXP;
}
extern "C" {
  pub fn R_MakeUnwindCont() -> SEXP;
}
extern "C" {
  pub fn R_ContinueUnwind(cont: SEXP) -> !;
}
extern "C" {
  pub fn R_UnwindProtect(
    fun: ::std::option::Option<
      unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> SEXP,
    >,
    data: *mut ::std::os::raw::c_void,
    cleanfun: ::std::option::Option<
      unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, jump: Rboolean),
    >,
    cleandata: *mut ::std::os::raw::c_void, cont: SEXP,
  ) -> SEXP;
}
extern "C" {
  #[doc = "Environment and Binding Features"]
  pub fn R_NewEnv(
    arg1: SEXP, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int,
  ) -> SEXP;
}
extern "C" {
  pub fn R_IsPackageEnv(rho: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_PackageEnvName(rho: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_FindPackageEnv(info: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_IsNamespaceEnv(rho: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_NamespaceEnvSpec(rho: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_FindNamespace(info: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_LockEnvironment(env: SEXP, bindings: Rboolean);
}
extern "C" {
  pub fn R_EnvironmentIsLocked(env: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_LockBinding(sym: SEXP, env: SEXP);
}
extern "C" {
  pub fn R_unLockBinding(sym: SEXP, env: SEXP);
}
extern "C" {
  pub fn R_MakeActiveBinding(sym: SEXP, fun: SEXP, env: SEXP);
}
extern "C" {
  pub fn R_BindingIsLocked(sym: SEXP, env: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_BindingIsActive(sym: SEXP, env: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_ActiveBindingFunction(sym: SEXP, env: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_HasFancyBindings(rho: SEXP) -> Rboolean;
}
extern "C" {
  #[doc = "../main/errors.c : */\n/* needed for R_load/savehistory handling in front ends"]
  pub fn Rf_errorcall(
    arg1: SEXP, arg2: *const ::std::os::raw::c_char, ...
  ) -> !;
}
extern "C" {
  pub fn Rf_warningcall(arg1: SEXP, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn Rf_warningcall_immediate(
    arg1: SEXP, arg2: *const ::std::os::raw::c_char, ...
  );
}
extern "C" {
  pub fn R_XDREncodeDouble(d: f64, buf: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn R_XDRDecodeDouble(buf: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
  pub fn R_XDREncodeInteger(
    i: ::std::os::raw::c_int, buf: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn R_XDRDecodeInteger(
    buf: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
pub type R_pstream_data_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum R_pstream_format_t {
  R_pstream_any_format = 0,
  R_pstream_ascii_format = 1,
  R_pstream_binary_format = 2,
  R_pstream_xdr_format = 3,
  R_pstream_asciihex_format = 4,
}
pub type R_outpstream_t = *mut R_outpstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_outpstream_st {
  pub data: R_pstream_data_t,
  pub type_: R_pstream_format_t,
  pub version: ::std::os::raw::c_int,
  pub OutChar: ::std::option::Option<
    unsafe extern "C" fn(arg1: R_outpstream_t, arg2: ::std::os::raw::c_int),
  >,
  pub OutBytes: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: R_outpstream_t,
      arg2: *mut ::std::os::raw::c_void,
      arg3: ::std::os::raw::c_int,
    ),
  >,
  pub OutPersistHookFunc:
    ::std::option::Option<unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP>,
  pub OutPersistHookData: SEXP,
}
#[test]
fn bindgen_test_layout_R_outpstream_st() {
  const UNINIT: ::std::mem::MaybeUninit<R_outpstream_st> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<R_outpstream_st>(),
    48usize,
    concat!("Size of: ", stringify!(R_outpstream_st))
  );
  assert_eq!(
    ::std::mem::align_of::<R_outpstream_st>(),
    8usize,
    concat!("Alignment of ", stringify!(R_outpstream_st))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OutChar) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(OutChar)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OutBytes) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(OutBytes)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).OutPersistHookFunc) as usize - ptr as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(OutPersistHookFunc)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).OutPersistHookData) as usize - ptr as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(R_outpstream_st),
      "::",
      stringify!(OutPersistHookData)
    )
  );
}
pub type R_inpstream_t = *mut R_inpstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_inpstream_st {
  pub data: R_pstream_data_t,
  pub type_: R_pstream_format_t,
  pub InChar: ::std::option::Option<
    unsafe extern "C" fn(arg1: R_inpstream_t) -> ::std::os::raw::c_int,
  >,
  pub InBytes: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: R_inpstream_t,
      arg2: *mut ::std::os::raw::c_void,
      arg3: ::std::os::raw::c_int,
    ),
  >,
  pub InPersistHookFunc:
    ::std::option::Option<unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP>,
  pub InPersistHookData: SEXP,
  pub native_encoding: [::std::os::raw::c_char; 64usize],
  pub nat2nat_obj: *mut ::std::os::raw::c_void,
  pub nat2utf8_obj: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_R_inpstream_st() {
  const UNINIT: ::std::mem::MaybeUninit<R_inpstream_st> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<R_inpstream_st>(),
    128usize,
    concat!("Size of: ", stringify!(R_inpstream_st))
  );
  assert_eq!(
    ::std::mem::align_of::<R_inpstream_st>(),
    8usize,
    concat!("Alignment of ", stringify!(R_inpstream_st))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InChar) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(InChar)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InBytes) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(InBytes)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).InPersistHookFunc) as usize - ptr as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(InPersistHookFunc)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).InPersistHookData) as usize - ptr as usize
    },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(InPersistHookData)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).native_encoding) as usize - ptr as usize
    },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(native_encoding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).nat2nat_obj) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(nat2nat_obj)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).nat2utf8_obj) as usize - ptr as usize
    },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(R_inpstream_st),
      "::",
      stringify!(nat2utf8_obj)
    )
  );
}
extern "C" {
  pub fn R_InitInPStream(
    stream: R_inpstream_t, data: R_pstream_data_t, type_: R_pstream_format_t,
    inchar: ::std::option::Option<
      unsafe extern "C" fn(arg1: R_inpstream_t) -> ::std::os::raw::c_int,
    >,
    inbytes: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: R_inpstream_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
      ),
    >,
    phook: ::std::option::Option<
      unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP,
    >,
    pdata: SEXP,
  );
}
extern "C" {
  pub fn R_InitOutPStream(
    stream: R_outpstream_t, data: R_pstream_data_t, type_: R_pstream_format_t,
    version: ::std::os::raw::c_int,
    outchar: ::std::option::Option<
      unsafe extern "C" fn(arg1: R_outpstream_t, arg2: ::std::os::raw::c_int),
    >,
    outbytes: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: R_outpstream_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
      ),
    >,
    phook: ::std::option::Option<
      unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP,
    >,
    pdata: SEXP,
  );
}
extern "C" {
  pub fn R_InitFileInPStream(
    stream: R_inpstream_t, fp: *mut FILE, type_: R_pstream_format_t,
    phook: ::std::option::Option<
      unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP,
    >,
    pdata: SEXP,
  );
}
extern "C" {
  pub fn R_InitFileOutPStream(
    stream: R_outpstream_t, fp: *mut FILE, type_: R_pstream_format_t,
    version: ::std::os::raw::c_int,
    phook: ::std::option::Option<
      unsafe extern "C" fn(arg1: SEXP, arg2: SEXP) -> SEXP,
    >,
    pdata: SEXP,
  );
}
extern "C" {
  pub fn R_Serialize(s: SEXP, ops: R_outpstream_t);
}
extern "C" {
  pub fn R_Unserialize(ips: R_inpstream_t) -> SEXP;
}
extern "C" {
  pub fn R_SerializeInfo(ips: R_inpstream_t) -> SEXP;
}
extern "C" {
  #[doc = "slot management (in attrib.c)"]
  pub fn R_do_slot(obj: SEXP, name: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_do_slot_assign(obj: SEXP, name: SEXP, value: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_has_slot(obj: SEXP, name: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "S3-S4 class (inheritance), attrib.c"]
  pub fn R_S4_extends(klass: SEXP, useTable: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "class definition, new objects (objects.c)"]
  pub fn R_do_MAKE_CLASS(what: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn R_getClassDef(what: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn R_getClassDef_R(what: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_has_methods_attached() -> Rboolean;
}
extern "C" {
  pub fn R_isVirtualClass(class_def: SEXP, env: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_extends(class1: SEXP, class2: SEXP, env: SEXP) -> Rboolean;
}
extern "C" {
  pub fn R_do_new_object(class_def: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "supporting  a C-level version of  is(., .) :"]
  pub fn R_check_class_and_super(
    x: SEXP, valid: *mut *const ::std::os::raw::c_char, rho: SEXP,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_check_class_etc(
    x: SEXP, valid: *mut *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = "preserve objects across GCs"]
  pub fn R_PreserveObject(arg1: SEXP);
}
extern "C" {
  pub fn R_ReleaseObject(arg1: SEXP);
}
extern "C" {
  pub fn R_NewPreciousMSet(arg1: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn R_PreserveInMSet(x: SEXP, mset: SEXP);
}
extern "C" {
  pub fn R_ReleaseFromMSet(x: SEXP, mset: SEXP);
}
extern "C" {
  pub fn R_ReleaseMSet(mset: SEXP, keepSize: ::std::os::raw::c_int);
}
extern "C" {
  #[doc = "Shutdown actions"]
  pub fn R_dot_Last();
}
extern "C" {
  pub fn R_RunExitFinalizers();
}
extern "C" {
  pub fn R_system(arg1: *const ::std::os::raw::c_char)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_compute_identical(
    arg1: SEXP, arg2: SEXP, arg3: ::std::os::raw::c_int,
  ) -> Rboolean;
}
extern "C" {
  pub fn R_body_no_src(x: SEXP) -> SEXP;
}
extern "C" {
  #[doc = "C version of R's  indx <- order(..., na.last, decreasing) :\ne.g.  arglist = Rf_lang2(x,y)  or  Rf_lang3(x,y,z)"]
  pub fn R_orderVector(
    indx: *mut ::std::os::raw::c_int, n: ::std::os::raw::c_int, arglist: SEXP,
    nalast: Rboolean, decreasing: Rboolean,
  );
}
extern "C" {
  #[doc = "C version of R's  indx <- order(x, na.last, decreasing) :"]
  pub fn R_orderVector1(
    indx: *mut ::std::os::raw::c_int, n: ::std::os::raw::c_int, x: SEXP,
    nalast: Rboolean, decreasing: Rboolean,
  );
}
extern "C" {
  #[doc = "These are the public inlinable functions that are provided in\nRinlinedfuns.h It is *essential* that these do not appear in any\nother header file, with or without the Rf_ prefix."]
  pub fn Rf_allocVector(arg1: SEXPTYPE, arg2: R_xlen_t) -> SEXP;
}
extern "C" {
  pub fn Rf_conformable(arg1: SEXP, arg2: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_elt(arg1: SEXP, arg2: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn Rf_inherits(
    arg1: SEXP, arg2: *const ::std::os::raw::c_char,
  ) -> Rboolean;
}
extern "C" {
  pub fn Rf_isArray(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isFactor(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isFrame(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isFunction(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isInteger(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isLanguage(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isList(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isMatrix(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isNewList(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isNumber(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isNumeric(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isPairList(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isPrimitive(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isTs(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isUserBinop(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isValidString(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isValidStringF(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isVector(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isVectorAtomic(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isVectorList(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_isVectorizable(arg1: SEXP) -> Rboolean;
}
extern "C" {
  pub fn Rf_lang1(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lang2(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lang3(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lang4(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lang5(
    arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP, arg5: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_lang6(
    arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP, arg5: SEXP, arg6: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_lastElt(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_lcons(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_length(arg1: SEXP) -> R_len_t;
}
extern "C" {
  pub fn Rf_list1(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_list2(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_list3(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_list4(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_list5(
    arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP, arg5: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_list6(
    arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP, arg5: SEXP, arg6: SEXP,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_listAppend(arg1: SEXP, arg2: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_mkNamed(
    arg1: SEXPTYPE, arg2: *mut *const ::std::os::raw::c_char,
  ) -> SEXP;
}
extern "C" {
  pub fn Rf_mkString(arg1: *const ::std::os::raw::c_char) -> SEXP;
}
extern "C" {
  pub fn Rf_nlevels(arg1: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_stringPositionTr(
    arg1: SEXP, arg2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_ScalarComplex(arg1: Rcomplex) -> SEXP;
}
extern "C" {
  pub fn Rf_ScalarInteger(arg1: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn Rf_ScalarLogical(arg1: ::std::os::raw::c_int) -> SEXP;
}
extern "C" {
  pub fn Rf_ScalarRaw(arg1: Rbyte) -> SEXP;
}
extern "C" {
  pub fn Rf_ScalarReal(arg1: f64) -> SEXP;
}
extern "C" {
  pub fn Rf_ScalarString(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_xlength(arg1: SEXP) -> R_xlen_t;
}
extern "C" {
  pub fn XTRUELENGTH(x: SEXP) -> R_xlen_t;
}
extern "C" {
  pub fn LENGTH_EX(
    x: SEXP, file: *const ::std::os::raw::c_char, line: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn XLENGTH_EX(x: SEXP) -> R_xlen_t;
}
extern "C" {
  pub fn Rf_protect(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_unprotect(arg1: ::std::os::raw::c_int);
}
extern "C" {
  pub fn R_ProtectWithIndex(arg1: SEXP, arg2: *mut PROTECT_INDEX);
}
extern "C" {
  pub fn R_Reprotect(arg1: SEXP, arg2: PROTECT_INDEX);
}
extern "C" {
  pub fn CAR(e: SEXP) -> SEXP;
}
extern "C" {
  pub fn DATAPTR(x: SEXP) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn DATAPTR_RO(x: SEXP) -> *const ::std::os::raw::c_void;
}
extern "C" {
  pub fn DATAPTR_OR_NULL(x: SEXP) -> *const ::std::os::raw::c_void;
}
extern "C" {
  pub fn LOGICAL_OR_NULL(x: SEXP) -> *const ::std::os::raw::c_int;
}
extern "C" {
  pub fn INTEGER_OR_NULL(x: SEXP) -> *const ::std::os::raw::c_int;
}
extern "C" {
  pub fn REAL_OR_NULL(x: SEXP) -> *const f64;
}
extern "C" {
  pub fn COMPLEX_OR_NULL(x: SEXP) -> *const Rcomplex;
}
extern "C" {
  pub fn RAW_OR_NULL(x: SEXP) -> *const Rbyte;
}
extern "C" {
  pub fn INTEGER_ELT(x: SEXP, i: R_xlen_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn REAL_ELT(x: SEXP, i: R_xlen_t) -> f64;
}
extern "C" {
  pub fn LOGICAL_ELT(x: SEXP, i: R_xlen_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn COMPLEX_ELT(x: SEXP, i: R_xlen_t) -> Rcomplex;
}
extern "C" {
  pub fn RAW_ELT(x: SEXP, i: R_xlen_t) -> Rbyte;
}
extern "C" {
  pub fn STRING_ELT(x: SEXP, i: R_xlen_t) -> SEXP;
}
extern "C" {
  pub fn SET_LOGICAL_ELT(x: SEXP, i: R_xlen_t, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_INTEGER_ELT(x: SEXP, i: R_xlen_t, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_REAL_ELT(x: SEXP, i: R_xlen_t, v: f64);
}
extern "C" {
  pub fn SET_COMPLEX_ELT(x: SEXP, i: R_xlen_t, v: Rcomplex);
}
extern "C" {
  pub fn SET_RAW_ELT(x: SEXP, i: R_xlen_t, v: Rbyte);
}
extern "C" {
  #[doc = "ALTREP support"]
  pub fn ALTREP_CLASS(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_altrep_data1(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_altrep_data2(x: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_set_altrep_data1(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn R_set_altrep_data2(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn LOGICAL0(x: SEXP) -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn INTEGER0(x: SEXP) -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn REAL0(x: SEXP) -> *mut f64;
}
extern "C" {
  pub fn COMPLEX0(x: SEXP) -> *mut Rcomplex;
}
extern "C" {
  pub fn RAW0(x: SEXP) -> *mut Rbyte;
}
extern "C" {
  pub fn ALTREP(x: SEXP) -> ::std::os::raw::c_int;
}
#[doc = "try to allow some type checking"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_hashtab_type {
  pub cell: SEXP,
}
#[test]
fn bindgen_test_layout_R_hashtab_type() {
  const UNINIT: ::std::mem::MaybeUninit<R_hashtab_type> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<R_hashtab_type>(),
    8usize,
    concat!("Size of: ", stringify!(R_hashtab_type))
  );
  assert_eq!(
    ::std::mem::align_of::<R_hashtab_type>(),
    8usize,
    concat!("Alignment of ", stringify!(R_hashtab_type))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cell) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(R_hashtab_type),
      "::",
      stringify!(cell)
    )
  );
}
extern "C" {
  #[doc = "public C interface"]
  pub fn R_asHashtable(h: SEXP) -> R_hashtab_type;
}
extern "C" {
  pub fn R_HashtabSEXP(h: R_hashtab_type) -> SEXP;
}
extern "C" {
  pub fn R_isHashtable(h: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_mkhashtab(
    type_: ::std::os::raw::c_int, arg1: ::std::os::raw::c_int,
  ) -> R_hashtab_type;
}
extern "C" {
  pub fn R_gethash(h: R_hashtab_type, key: SEXP, nomatch: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_sethash(h: R_hashtab_type, key: SEXP, value: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_remhash(h: R_hashtab_type, key: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_numhash(h: R_hashtab_type) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_typhash(h: R_hashtab_type) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_maphash(h: R_hashtab_type, FUN: SEXP) -> SEXP;
}
extern "C" {
  pub fn R_maphashC(
    h: R_hashtab_type,
    FUN: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: SEXP,
        arg2: SEXP,
        arg3: *mut ::std::os::raw::c_void,
      ),
    >,
    data: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn R_clrhash(h: R_hashtab_type);
}
extern "C" {
  #[doc = "stuff that probably shouldn't be in the API but is getting used"]
  pub fn SET_TYPEOF(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_OBJECT(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_S4_OBJECT(x: SEXP);
}
extern "C" {
  pub fn UNSET_S4_OBJECT(x: SEXP);
}
extern "C" {
  pub fn R_curErrorBuf() -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn IS_SCALAR(
    x: SEXP, type_: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_psmatch(
    arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char,
    arg3: Rboolean,
  ) -> Rboolean;
}
extern "C" {
  pub fn SETLENGTH(x: SEXP, v: R_xlen_t);
}
extern "C" {
  pub fn SET_TRUELENGTH(x: SEXP, v: R_xlen_t);
}
extern "C" {
  pub fn SETLEVELS(x: SEXP, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SET_ENVFLAGS(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  pub fn SET_FRAME(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_ENCLOS(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_HASHTAB(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_PRENV(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_PRVALUE(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn SET_PRCODE(x: SEXP, v: SEXP);
}
extern "C" {
  pub fn STDVEC_DATAPTR(x: SEXP) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn IS_GROWABLE(x: SEXP) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SET_GROWABLE_BIT(x: SEXP);
}
extern "C" {
  pub fn SET_NAMED(x: SEXP, v: ::std::os::raw::c_int);
}
extern "C" {
  #[doc = "used by BIOC::matter; mightbe reasonable to include in API"]
  pub fn R_tryWrap(arg1: SEXP) -> SEXP;
}
extern "C" {
  pub fn Rf_initEmbeddedR(
    argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Rf_endEmbeddedR(fatal: ::std::os::raw::c_int);
}
extern "C" {
  pub fn Rf_initialize_R(
    ac: ::std::os::raw::c_int, av: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setup_Rmainloop();
}
extern "C" {
  pub fn R_ReplDLLinit();
}
extern "C" {
  pub fn R_ReplDLLdo1() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_setStartTime();
}
extern "C" {
  pub fn CleanEd();
}
extern "C" {
  pub fn Rf_KillAllDevices();
}
extern "C" {
  pub static mut R_DirtyImage: ::std::os::raw::c_int;
}
extern "C" {
  pub fn R_CleanTempDir();
}
extern "C" {
  pub static mut R_TempDir: *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn R_SaveGlobalEnv();
}
extern "C" {
  pub fn getDLLVersion() -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn getRUser() -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn get_R_HOME() -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn freeRUser(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn free_R_HOME(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn setup_term_ui();
}
extern "C" {
  pub static mut UserBreak: ::std::os::raw::c_int;
}
extern "C" {
  pub static mut AllDevicesKilled: Rboolean;
}
extern "C" {
  pub fn editorcleanall();
}
extern "C" {
  pub fn GA_initapp(
    arg1: ::std::os::raw::c_int, arg2: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn GA_appcleanup();
}
extern "C" {
  pub fn readconsolecfg();
}
#[doc = "R 4.3 redefined `Rcomplex` to a union for compatibility with Fortran.\n But the old definition is compatible both the union version\n and the struct version.\n See: <https://github.com/extendr/extendr/issues/524>\n <div rustbindgen replaces=\"Rcomplex\"></div>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rcomplex {
  pub r: f64,
  pub i: f64,
}
#[test]
fn bindgen_test_layout_Rcomplex() {
  const UNINIT: ::std::mem::MaybeUninit<Rcomplex> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<Rcomplex>(),
    16usize,
    concat!("Size of: ", stringify!(Rcomplex))
  );
  assert_eq!(
    ::std::mem::align_of::<Rcomplex>(),
    8usize,
    concat!("Alignment of ", stringify!(Rcomplex))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
    0usize,
    concat!("Offset of field: ", stringify!(Rcomplex), "::", stringify!(r))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
    8usize,
    concat!("Offset of field: ", stringify!(Rcomplex), "::", stringify!(i))
  );
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
