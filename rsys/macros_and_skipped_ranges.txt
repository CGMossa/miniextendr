// include\R_ext/Arith.h
int R_finite(double);		/* True if none of NA, NaN, +/-Inf */

// include\R_ext/Arith.h
#ifdef __cplusplus
  int R_isnancpp(double); /* in arithmetic.c */
#  define ISNAN(x)     R_isnancpp(x)
#else

// include\R_ext/Arith.h
#ifdef HAVE_WORKING_ISFINITE
/* isfinite is defined in <math.h> according to C99 */
# define R_FINITE(x)    isfinite(x)
#else

// include\R_ext/RS.h
#define R_Calloc(n, t)   (t *) R_chk_calloc( (R_SIZE_T) (n), sizeof(t) )

// include\R_ext/RS.h
#define R_Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )

// include\R_ext/RS.h
#define R_Free(p)      (R_chk_free( (void *)(p) ), (p) = NULL)

// include\R_ext/RS.h
#define Memcpy(p,q,n)  memcpy( p, q, (R_SIZE_T)(n) * sizeof(*p) )

// include\R_ext/RS.h
#define Memzero(p,n)  memset(p, 0, (R_SIZE_T)(n) * sizeof(*p))

// include\R_ext/RS.h
#define CallocCharBuf(n) (char *) R_chk_calloc(((R_SIZE_T)(n))+1, sizeof(char))

// include\R_ext/RS.h
# define F77_CALL(x)	x ## _

// include\R_ext/RS.h
#else
# define F77_CALL(x)	x
#endif

// include\R_ext/RS.h
#define F77_SUB(x)     F77_CALL(x)

// include\R_ext/RS.h
#define F77_COM(x)     F77_CALL(x)

// include\R_ext/RS.h
#define F77_COMDECL(x) F77_CALL(x)

// include\Rinternals.h
#define CHAR(x) R_CHAR(x)

// include\Rinternals.h
#define IS_SIMPLE_SCALAR(x, type) \
    (IS_SCALAR(x, type) && ATTRIB(x) == R_NilValue)

// include\Rinternals.h
# define INCREMENT_NAMED(x) do { } while (0)

// include\Rinternals.h
# define DECREMENT_NAMED(x) do { } while (0)

// include\Rinternals.h
# define MAYBE_SHARED(x) (REFCNT(x) > 1)

// include\Rinternals.h
# define NO_REFERENCES(x) (REFCNT(x) == 0)

// include\Rinternals.h
#else
# define MAYBE_SHARED(x) (NAMED(x) > 1)
# define NO_REFERENCES(x) (NAMED(x) == 0)
#endif

// include\Rinternals.h
#define NOT_SHARED(x) (! MAYBE_SHARED(x))

// include\Rinternals.h
#define CONS(a, b)	cons((a), (b))		/* data lists */

// include\Rinternals.h
#define LCONS(a, b)	lcons((a), (b))		/* language lists */

// include\Rinternals.h
#define PROTECT(s)	Rf_protect(s)

// include\Rinternals.h
#define UNPROTECT(n)	Rf_unprotect(n)

// include\Rinternals.h
#define UNPROTECT_PTR(s)	Rf_unprotect_ptr(s)

// include\Rinternals.h
typedef int PROTECT_INDEX;

// include\Rinternals.h
#define REPROTECT(x,i) R_Reprotect(x,i)

// include\Rinternals.h
enum {SORTED_DECR_NA_1ST = -2,
      SORTED_DECR = -1,
      UNKNOWN_SORTEDNESS = INT_MIN, /*INT_MIN is NA_INTEGER! */
      SORTED_INCR = 1,
      SORTED_INCR_NA_1ST = 2,
      KNOWN_UNSORTED = 0};

// include\Rinternals.h
#define KNOWN_NA_1ST(sorted) (sorted == SORTED_INCR_NA_1ST ||	\
			      sorted == SORTED_DECR_NA_1ST)

// include\Rinternals.h
#define KNOWN_INCR(sorted) (sorted == SORTED_INCR ||		\
			    sorted == SORTED_INCR_NA_1ST)

// include\Rinternals.h
#define KNOWN_DECR(sorted) (sorted == SORTED_DECR ||	\
			    sorted == SORTED_DECR_NA_1ST)

// include\Rinternals.h
#define error_return(msg)	{ Rf_error(msg);	   return R_NilValue; }

// include\Rinternals.h
#define errorcall_return(cl,msg){ Rf_errorcall(cl, msg);   return R_NilValue; }

// include\Rinternals.h
#define BCODE_CONSTS(x) CDR(x) // re-enable in Defn.h after removing here

// include\Rinternals.h
#define PREXPR(e) R_PromiseExpr(e)

// include\Rinternals.h
#define BODY_EXPR(e) R_ClosureExpr(e)
